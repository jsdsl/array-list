"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const abstract_list_1=require("@jsdsl/abstract-list"),iter_over_1=require("iter-over");class ArrayList extends abstract_list_1.AbstractList{constructor(...r){super(),this.internalArray=r}add(r){this.internalArray.push(r)}get(r){if(r>=this.size()||r<0)throw new RangeError("ERR | Attempted to retrieve an out-of-bounds index.");return this.internalArray[r]}remove(r){for(;this.contains(r);)this.removeIndex(this.internalArray.indexOf(r))}removeIndex(r){return this.internalArray.splice(r,1)[0]}shuffle(r=1){for(let t=0;t<r;t++){let r=this.toArray();for(this.clear();0!==r.length;){let t=Math.floor(Math.random()*r.length),e=r.splice(t,1)[0];this.add(e)}}}size(){return this.internalArray.length}contains(r){return this.internalArray.includes(r)}clear(){this.internalArray=[]}iterator(){return new class extends iter_over_1.AbstractIterator{constructor(r){super(),this.arrayList=r,this.cursor=0}hasNext(){return this.cursor<this.arrayList.size()}next(){return this.hasNext()?this.arrayList.get(this.cursor++):void 0}}(this)}subList(r,t=this.size()){return new ArrayList(...this.toArray().splice(r,t-r))}toArray(){return this.internalArray}}exports.ArrayList=ArrayList;
//# sourceMappingURL=array-list.js.map

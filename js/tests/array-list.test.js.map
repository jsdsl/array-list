{"version":3,"sources":["ts/tests/array-list.test.ts"],"names":["array_list_1","require","list","describe","test","expect","ArrayList","not","toThrow","Error","toArray","toStrictEqual","beforeEach","add","addAll","get","toBe","RangeError","iterator","forEachRemaining","fail","next","toBeUndefined","hasNext","toBeFalsy","content","index","number"],"mappings":"oEAMA,MAAAA,aAAAC,QAAA,iBAWA,IAAIC,KAEJC,SAAS,wBAAyB,KAEjCC,KAAK,+BAAgC,KAEpCC,OAAO,IAAMH,KAAO,IAAIF,aAAAM,WAAaC,IAAIC,QAAQC,SAIlDN,SAAS,gCAAiC,KAEzCC,KAAK,uBAAwB,KAE5BC,OAAO,IAAMH,KAAO,IAAIF,aAAAM,UAAU,EAAG,EAAG,IAAIC,IAAIC,QAAQC,SAIzDL,KAAK,uBAAwB,KAE5BF,KAAO,IAAIF,aAAAM,UAAU,EAAG,EAAG,GAE3BD,OAAOH,KAAKQ,WAAWC,cAAc,CAAC,EAAG,EAAG,UAS/CR,SAAS,oBAAqB,KAE7BS,WAAW,KAEVV,KAAO,IAAIF,aAAAM,YAKZH,SAAS,OAAQ,KAEhBC,KAAK,2CAA4C,KAEhDF,KAAKW,IAAI,GAETR,OAAOH,KAAKQ,WAAWC,cAAc,CAAC,MAIvCP,KAAK,2CAA4C,KAEhDF,KAAKW,IAAI,GACTX,KAAKW,IAAI,GAETR,OAAOH,KAAKQ,WAAWC,cAAc,CAAC,EAAG,QAM3CR,SAAS,UAAW,KAEnBC,KAAK,+CAAgD,KAEpDF,KAAKY,OAAO,CAAC,GAAI,EAAG,IAEpBT,OAAOH,KAAKQ,WAAWC,cAAc,CAAC,GAAI,EAAG,MAI9CP,KAAK,2CAA4C,KAEhDF,KAAKY,OAAO,CAAC,EAAG,EAAG,IACnBZ,KAAKY,OAAO,CAAC,EAAG,EAAG,IAEnBT,OAAOH,KAAKQ,WAAWC,cAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,QAMvDR,SAAS,OAAQ,KAEhBS,WAAW,KAEVV,KAAKY,OAAO,CAAC,EAAG,EAAG,MAIpBV,KAAK,8CAA+C,KAEnDC,OAAOH,KAAKa,IAAI,IAAIC,KAAK,GACzBX,OAAOH,KAAKa,IAAI,IAAIC,KAAK,GACzBX,OAAOH,KAAKa,IAAI,IAAIC,KAAK,KAI1BZ,KAAK,mDAAoD,KAExDC,OAAO,IAAMH,KAAKa,KAAK,IAAIP,QAAQS,cAIpCb,KAAK,mDAAoD,KAExDC,OAAO,IAAMH,KAAKa,IAAI,IAAIP,QAAQS,gBAMpCd,SAAS,UAAW,QAMpBA,SAAS,eAAgB,QAMzBA,SAAS,WAAY,QAMrBA,SAAS,QAAS,QAMlBA,SAAS,YAAa,QAMtBA,SAAS,WAAY,QAMrBA,SAAS,SAAU,QAMnBA,SAAS,YAAa,KAErBC,KAAK,mBAAoB,KAExBF,KAAKgB,WAAWC,iBAAiB,KAEhCC,KAAK,sEAMPhB,KAAK,4CAA6C,KAEjDF,KAAKY,OAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE/B,IAAII,EAA8BhB,KAAKgB,WAEvCb,OAAOa,EAASG,QAAQL,KAAK,GAC7BX,OAAOa,EAASG,QAAQL,KAAK,GAC7BX,OAAOa,EAASG,QAAQL,KAAK,GAC7BX,OAAOa,EAASG,QAAQL,KAAK,GAC7BX,OAAOa,EAASG,QAAQL,KAAK,GAC7BX,OAAOa,EAASG,QAAQL,KAAK,GAC7BX,OAAOa,EAASG,QAAQL,KAAK,GAC7BX,OAAOa,EAASG,QAAQC,gBACxBjB,OAAOa,EAASK,WAAWC,cAI5BpB,KAAK,6CAA8C,KAElD,IAAIqB,EAAoB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE3CvB,KAAKY,OAAOW,GAEZ,IAAIC,EAAgB,EAChBR,EAA8BhB,KAAKgB,WAEvC,IAAK,IAAIS,KAAUT,EAElBb,OAAOsB,GAAQX,KAAKS,EAAQC,MAI7BrB,OAAOa,EAASG,QAAQC,gBACxBjB,OAAOa,EAASK,WAAWC,gBAM7BrB,SAAS,WAAY,QAMrBA,SAAS,WAAY","file":"array-list.test.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t5:06 PM -- July 22nd, 2019.\n *\tProject: @jsdsl/array-list\n */\n\nimport { ArrayList } from \"../array-list\";\nimport { IIterator } from \"iter-over\";\n\n/**\n * Various test cases for the JSDSL ArrayList.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\n\nlet list: ArrayList<number>;\n\ndescribe(\"Initialization tests.\", () => {\n\t\n\ttest(\"Simple empty initialization.\", () => {\n\t\t\n\t\texpect(() => list = new ArrayList()).not.toThrow(Error);\n\t\t\n\t});\n\t\n\tdescribe(\"Initialization with elements.\", () => {\n\t\t\n\t\ttest(\"Doesn't throw error.\", () => {\n\t\t\t\n\t\t\texpect(() => list = new ArrayList(1, 2, 3)).not.toThrow(Error);\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Has correct content.\", () => {\n\t\t\t\n\t\t\tlist = new ArrayList(9, 8, 7);\n\t\t\t\n\t\t\texpect(list.toArray()).toStrictEqual([9, 8, 7]);\n\t\t\t\n\t\t});\n\t\t\n\t});\n\t\n});\n\n\ndescribe(\"Per method tests.\", () => {\n\n\tbeforeEach(() => {\n\t\n\t\tlist = new ArrayList<number>();\n\t\n\t\t\n\t});\n\t\n\tdescribe(\"#add\", () => {\n\t\n\t\ttest(\"Add correctly modifies underlying array.\", () => {\n\t\t\t\n\t\t\tlist.add(5);\n\t\t\t\n\t\t\texpect(list.toArray()).toStrictEqual([5]);\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Elements are added in the correct order.\", () => {\n\t\t\t\n\t\t\tlist.add(7);\n\t\t\tlist.add(3);\n\t\t\t\n\t\t\texpect(list.toArray()).toStrictEqual([7, 3]);\n\t\t\t\n\t\t});\n\t\n\t});\n\t\n\tdescribe(\"#addAll\", () => {\n\t\t\n\t\ttest(\"Add all correctly modifies underlying array.\", () => {\n\t\t\t\n\t\t\tlist.addAll([10, 2, 9]);\n\t\t\t\n\t\t\texpect(list.toArray()).toStrictEqual([10, 2, 9]);\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Elements are added in the correct order.\", () => {\n\t\t\t\n\t\t\tlist.addAll([1, 3, 5]);\n\t\t\tlist.addAll([2, 4, 6]);\n\t\t\t\n\t\t\texpect(list.toArray()).toStrictEqual([1, 3, 5, 2, 4, 6]);\n\t\t\t\n\t\t});\n\t\n\t});\n\t\n\tdescribe(\"#get\", () => {\n\t\t\n\t\tbeforeEach(() => {\n\t\t\t\n\t\t\tlist.addAll([3, 5, 7]);\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Well-defined indices return proper content.\", () => {\n\t\t\t\n\t\t\texpect(list.get(0)).toBe(3);\n\t\t\texpect(list.get(1)).toBe(5);\n\t\t\texpect(list.get(2)).toBe(7);\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Out of bounds (under bounds) index throws error.\", () => {\n\t\t\t\n\t\t\texpect(() => list.get(-1)).toThrow(RangeError);\n\t\t\t\n\t\t});\n\t\n\t\ttest(\"Out of bounds (above bounds) index throws error.\", () => {\n\t\t\t\n\t\t\texpect(() => list.get(3)).toThrow(RangeError);\n\t\t\t\n\t\t});\n\t\n\t});\n\t\n\tdescribe(\"#remove\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#removeIndex\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#shuffle\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#size\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#contains\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#isEmpty\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#clear\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#iterator\", () => {\n\t\n\t\ttest(\"With no content.\", () => {\n\t\t\n\t\t\tlist.iterator().forEachRemaining(() => {\n\t\t\t\t\n\t\t\t\tfail(\"Iterator has no content and as such should never execute this.\");\n\t\t\t\t\n\t\t\t});\n\t\t\n\t\t});\n\t\t\n\t\ttest(\"With normal content via manual iteration.\", () => {\n\t\t\t\n\t\t\tlist.addAll([8, 6, 7, 5, 3, 0, 9]);\n\t\t\t\n\t\t\tlet iterator: IIterator<number> = list.iterator();\n\t\t\t\n\t\t\texpect(iterator.next()).toBe(8);\n\t\t\texpect(iterator.next()).toBe(6);\n\t\t\texpect(iterator.next()).toBe(7);\n\t\t\texpect(iterator.next()).toBe(5);\n\t\t\texpect(iterator.next()).toBe(3);\n\t\t\texpect(iterator.next()).toBe(0);\n\t\t\texpect(iterator.next()).toBe(9);\n\t\t\texpect(iterator.next()).toBeUndefined();\n\t\t\texpect(iterator.hasNext()).toBeFalsy();\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"With normal content via [Symbol.iterator].\", () => {\n\t\t\t\n\t\t\tlet content: number[] = [8, 6, 7, 5, 3, 0, 9];\n\t\t\t\n\t\t\tlist.addAll(content);\n\t\t\t\n\t\t\tlet index: number = 0;\n\t\t\tlet iterator: IIterator<number> = list.iterator();\n\t\t\t\n\t\t\tfor (let number of iterator) {\n\t\t\t\t\n\t\t\t\texpect(number).toBe(content[index++]);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\texpect(iterator.next()).toBeUndefined();\n\t\t\texpect(iterator.hasNext()).toBeFalsy();\n\t\t\t\n\t\t});\n\t\n\t});\n\t\n\tdescribe(\"#subList\", () => {\n\t\n\t\n\t\n\t});\n\t\n\tdescribe(\"#toArray\", () => {\n\t\n\t\n\t\n\t});\n\n});"]}
{"version":3,"sources":["../ts/array-list.ts"],"names":["abstract_list_1","require","iter_over_1","ArrayList","AbstractList","[object Object]","elements","super","this","internalArray","element","push","index","size","RangeError","contains","removeIndex","indexOf","splice","iterations","count","toArray","clear","length","random","Math","floor","add","includes","AbstractIterator","arrayList","cursor","hasNext","get","start","end","exports"],"mappings":"oEAMA,MAAAA,gBAAAC,QAAA,wBACAC,YAAAD,QAAA,aASA,MAAaE,kBAA2BH,gBAAAI,aAYvCC,eAAsBC,GAErBC,QAEAC,KAAKC,cAAgBH,EASfD,IAAIK,GAEVF,KAAKC,cAAcE,KAAKD,GAUlBL,IAAIO,GAEV,GAAKA,GAASJ,KAAKK,QAAYD,EAAQ,EAAI,MAAM,IAAIE,WAAW,uDAC3D,OAAON,KAAKC,cAAcG,GAKzBP,OAAOK,GAEb,KAAOF,KAAKO,SAASL,IAAUF,KAAKQ,YAAYR,KAAKC,cAAcQ,QAAQP,IAKrEL,YAAYO,GAElB,OAAOJ,KAAKC,cAAcS,OAAON,EAAO,GAAG,GAKrCP,QAAQc,EAAqB,GAEnC,IAAK,IAAIC,EAAgB,EAAGA,EAAQD,EAAYC,IAAS,CAExD,IAAId,EAAgBE,KAAKa,UAGzB,IAFAb,KAAKc,QAEsB,IAApBhB,EAASiB,QAAc,CAE7B,IAAIC,EAAiBC,KAAKC,MAAMD,KAAKD,SAAWlB,EAASiB,QACrDb,EAAaJ,EAASY,OAAOM,EAAQ,GAAG,GAC5ChB,KAAKmB,IAAIjB,KASLL,OAEN,OAAOG,KAAKC,cAAcc,OAKpBlB,SAASK,GAEf,OAAOF,KAAKC,cAAcmB,SAASlB,GAK7BL,QAENG,KAAKC,cAAgB,GAKfJ,WAEN,OAAO,IAAI,cAAcH,YAAA2B,iBAMxBxB,YAAmByB,GAElBvB,QAEAC,KAAKsB,UAAYA,EACjBtB,KAAKuB,OAAS,EAIR1B,UAEN,OAAQG,KAAKuB,OAASvB,KAAKsB,UAAUjB,OAI/BR,OAEN,OAAIG,KAAKwB,UAAkBxB,KAAKsB,UAAUG,IAAIzB,KAAKuB,eAC9C,IAILvB,MAKIH,QAAQ6B,EAAeC,EAAc3B,KAAKK,QAEhD,OAAO,IAAIV,aAAgBK,KAAKa,UAAUH,OAAOgB,EAAQC,EAAMD,IAKzD7B,UAEN,OAAOG,KAAKC,eAhJd2B,QAAAjC,UAAAA","file":"array-list.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t4:45 PM -- July 22nd, 2019.\n *\tProject: @jsdsl/array-list\n */\n\nimport { AbstractList } from \"@jsdsl/abstract-list\";\nimport { IIterator, AbstractIterator } from \"iter-over\";\n\n/**\n * An arraylist implementation in JavaScript/TypeScript.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class ArrayList<E = any> extends AbstractList<E> {\n\t\n\t/**\n\t * The internal array that is used to maintain this ArrayList's data.\n\t */\n\tprivate internalArray: E[];\n\t\n\t/**\n\t * Initializes a new ArrayList with the provided elements.\n\t *\n\t * @param elements The elements to add to the newly initialized ArrayList.\n\t */\n\tpublic constructor(...elements: E[]) {\n\t\t\n\t\tsuper();\n\t\t\n\t\tthis.internalArray = elements;\n\t\t\n\t}\n\t\n\t/**\n\t * Adds an element to this ArrayList.\n\t *\n\t * @param element The element to add to this ArrayList.\n\t */\n\tpublic add(element: E): void {\n\t\t\n\t\tthis.internalArray.push(element);\n\t\t\n\t}\n\t\n\t/**\n\t * Gets the element at the specified index and returns it.\n\t *\n\t * @param index The index from which to retrieve an element.\n\t * @throws If an out-of-bounds index is passed.\n\t */\n\tpublic get(index: number): E {\n\t\t\n\t\tif ((index >= this.size()) || (index < 0)) throw new RangeError(\"ERR | Attempted to retrieve an out-of-bounds index.\");\n\t\telse return this.internalArray[index];\n\t\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:51 PM] - Documentation required!\n\tpublic remove(element: E): void {\n\t\t\n\t\twhile (this.contains(element)) this.removeIndex(this.internalArray.indexOf(element));\n\t\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:51 PM] - Documentation required!\n\tpublic removeIndex(index: number): E {\n\t\t\n\t\treturn this.internalArray.splice(index, 1)[0];\n\t\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:51 PM] - Documentation required!\n\tpublic shuffle(iterations: number = 1): void {\n\t\t\n\t\tfor (let count: number = 0; count < iterations; count++) {\n\t\t\t\n\t\t\tlet elements: E[] = this.toArray();\n\t\t\tthis.clear();\n\t\t\t\n\t\t\twhile (elements.length !== 0) {\n\t\t\t\t\n\t\t\t\tlet random: number = Math.floor(Math.random() * elements.length);\n\t\t\t\tlet element: E = elements.splice(random, 1)[0];\n\t\t\t\tthis.add(element);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:51 PM] - Documentation required!\n\tpublic size(): number {\n\t\t\n\t\treturn this.internalArray.length;\n\t\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:51 PM] - Documentation required!\n\tpublic contains(element: E): boolean {\n\t\t\n\t\treturn this.internalArray.includes(element);\n\t\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:51 PM] - Documentation required!\n\tpublic clear(): void {\n\t\n\t\tthis.internalArray = [];\n\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:52 PM] - Documentation required!\n\tpublic iterator(): IIterator<E> {\n\t\t\n\t\treturn new class extends AbstractIterator<E> {\n\t\t\t\n\t\t\tprivate arrayList: ArrayList<E>;\n\t\t\t\n\t\t\tprivate cursor: number;\n\t\t\t\n\t\t\tpublic constructor(arrayList: ArrayList<E>) {\n\t\t\t\t\n\t\t\t\tsuper();\n\t\t\t\t\n\t\t\t\tthis.arrayList = arrayList;\n\t\t\t\tthis.cursor = 0;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic hasNext(): boolean {\n\t\t\t\t\n\t\t\t\treturn (this.cursor < this.arrayList.size());\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic next(): any {\n\t\t\t\t\n\t\t\t\tif (this.hasNext()) return this.arrayList.get(this.cursor++);\n\t\t\t\telse return undefined;\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}(this);\n\t\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:52 PM] - Documentation required!\n\tpublic subList(start: number, end: number = this.size()): ArrayList<E> {\n\t\n\t\treturn new ArrayList<E>(...this.toArray().splice(start, (end - start)));\n\t\n\t}\n\t\n\t// DOC-ME [7/22/19 @ 5:52 PM] - Documentation required!\n\tpublic toArray(): E[] {\n\t\t\n\t\treturn this.internalArray;\n\t\t\n\t}\n\t\n}"]}